const moment = require("moment-timezone");
const axios = require("axios");
const fs = require("fs-extra");
const configPath = __dirname + "/uptime_config.json";

const boldText = (text) => {
  const boldMap = {
    'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö',
    'H': 'ùóõ', 'I': 'ùóú', 'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°',
    'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®',
    'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
    'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥',
    'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª',
    'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ',
    'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá',
    '0': 'ùü¨', '1': 'ùü≠', '2': 'ùüÆ', '3': 'ùüØ', '4': 'ùü∞',
    '5': 'ùü±', '6': 'ùü≤', '7': 'ùü≥', '8': 'ùü¥', '9': 'ùüµ'
  };
  return text.split('').map(c => boldMap[c] || c).join('');
};

module.exports = {
  config: {
    name: "uptime",
    aliases: ["upt"],
    version: "1.3",
    usePrefix: false,
    author: "opu",
    role: 0,
    shortDescription: {
      en: "View bot uptime and usage stats."
    },
    longDescription: {
      en: "Get the bot's current uptime, total users, active threads, and timezone info."
    },
    category: "system",
    guide: {
      en: "uptime --image on\nuptime --image off"
    }
  },

  onStart: async function ({ api, event, args, usersData, threadsData }) {
    try {
      let config = {};
      if (fs.existsSync(configPath)) {
        config = JSON.parse(fs.readFileSync(configPath));
      }

      const argStr = args.join(" ").toLowerCase();
      if (argStr.includes("--image on")) {
        config.image = true;
        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
        return api.sendMessage("‚úÖ Image mode is now ON.", event.threadID);
      } else if (argStr.includes("--image off")) {
        config.image = false;
        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
        return api.sendMessage("‚úÖ Image mode is now OFF.", event.threadID);
      }

      const allUsers = await usersData.getAll();
      const allThreads = await threadsData.getAll();
      const uptime = process.uptime();

      const hours = Math.floor(uptime / 3600);
      const minutes = Math.floor((uptime % 3600) / 60);
      const seconds = Math.floor(uptime % 60);

      const uptimeFormatted = `${hours}h ${minutes}m ${seconds}s`;
      const totalUsers = allUsers.length.toLocaleString();
      const totalThreads = allThreads.length.toLocaleString();

      const timeZone = "Asia/Dhaka";
      const currentTime = moment().tz(timeZone).format("YYYY-MM-DD HH:mm:ss");
      const startTime = moment().subtract(uptime, "seconds").tz(timeZone).format("YYYY-MM-DD HH:mm:ss");

      const message =
`‚ï≠‚îÄ‚è±Ô∏è ${boldText("BOT STATUS & UPTIME")} ‚îÄ‚ïÆ
‚îÇ
‚îÇ üìå ${boldText("Uptime")}     : ${uptimeFormatted}
‚îÇ üïí ${boldText("Timezone")}   : ${timeZone}
‚îÇ ‚è∞ ${boldText("Current")}    : ${currentTime}
‚îÇ üöÄ ${boldText("Started")}    : ${startTime}
‚îÇ
‚îú‚îÄüìä ${boldText("USAGE STATS")} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ üë§ ${boldText("Users")}      : ${totalUsers}
‚îÇ üí¨ ${boldText("Threads")}    : ${totalThreads}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;

      if (config.image) {
        try {
          const imageUrl = "http://160.191.129.54:5000/cdn/zYMnhVKfG.jpg";
          const imgPath = __dirname + "/uptime.jpg";
          const response = await axios.get(imageUrl, { responseType: "arraybuffer" });
          fs.writeFileSync(imgPath, Buffer.from(response.data));

          return api.sendMessage({
            body: message,
            attachment: fs.createReadStream(imgPath)
          }, event.threadID, () => fs.unlinkSync(imgPath));
        } catch (imgErr) {
          console.error("Image download error:", imgErr);
          return api.sendMessage(message + "\n\n‚ö†Ô∏è Image download failed, showing text only.", event.threadID);
        }
      } else {
        return api.sendMessage(message, event.threadID);
      }

    } catch (error) {
      console.error("Uptime Error:", error);
      api.sendMessage("‚ùå Sorry, I couldn't fetch the uptime info right now.", event.threadID);
    }
  }
};
